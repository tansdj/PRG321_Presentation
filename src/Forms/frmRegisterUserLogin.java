/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import PersonManagement.Address;
import PersonManagement.Contact;
import PersonManagement.Department;
import PersonManagement.Person;
import PersonManagement.PersonManagement_Methods;
import PersonManagement.SecurityQuestions;
import PersonManagement.User;
import PersonManagement.UserSecurityQuestions;
import bc_stationary_bll.Communication;
import bc_stationary_bll.Validation;
import bc_stationary_management_system.ClientHandler;
import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Eldane
 */
public class frmRegisterUserLogin extends javax.swing.JFrame {

    /**
     * Creates new form frmRegisterUserLogin
     */
    
    public frmRegisterUserLogin() {
        initComponents();
    }
    
    public Person person = null;
    Communication c;
    public frmRegisterUserLogin(Person p)
    {
        try {
            initComponents();
            person = p;
            this.setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);
            this.getContentPane().setBackground(new Color(45,45,45));
            txtAccessLevel.setEditable(false);
            txtStatus.setEditable(false);
            ArrayList<SecurityQuestions> questions = new ArrayList<SecurityQuestions>();
            SecurityQuestions seqQuestion = new SecurityQuestions();
            c = new Communication(PersonManagement_Methods.SQ_SELECT_ALL.methodIdentifier, seqQuestion);
            questions = new ClientHandler(c).request().listResult;
            // Populate Combobox
            for(SecurityQuestions s:questions){
                cmbQuestion.addItem(s.getQuestion());
            }
        } catch (IOException ex) {
            Logger.getLogger(frmRegisterUserLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlRegisterHeader = new javax.swing.JPanel();
        pnlRegisterHeader1 = new javax.swing.JPanel();
        lblRegisterUser = new javax.swing.JLabel();
        pnlMenu = new javax.swing.JPanel();
        btnRegisterUser = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        pnlSecurityQuestion = new javax.swing.JPanel();
        lblSecurityQuestion = new javax.swing.JLabel();
        lblChooseQuestion = new javax.swing.JLabel();
        txtAnswer = new javax.swing.JTextField();
        lblAnswer = new javax.swing.JLabel();
        cmbQuestion = new javax.swing.JComboBox<>();
        pnlLoginInfo = new javax.swing.JPanel();
        lblLoginInfo = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        lblRePassword = new javax.swing.JLabel();
        txtStatus = new javax.swing.JTextField();
        lblAccessLevel = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        txtRePassword = new javax.swing.JTextField();
        txtAccessLevel = new javax.swing.JTextField();
        btnRegister = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(45, 45, 45));
        setResizable(false);

        pnlRegisterHeader.setBackground(new java.awt.Color(255, 255, 0));
        pnlRegisterHeader.setPreferredSize(new java.awt.Dimension(1071, 530));

        pnlRegisterHeader1.setBackground(new java.awt.Color(204, 0, 0));
        pnlRegisterHeader1.setPreferredSize(new java.awt.Dimension(1307, 65));

        lblRegisterUser.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        lblRegisterUser.setForeground(new java.awt.Color(255, 255, 255));
        lblRegisterUser.setText("Register User");
        lblRegisterUser.setAlignmentY(0.0F);

        javax.swing.GroupLayout pnlRegisterHeader1Layout = new javax.swing.GroupLayout(pnlRegisterHeader1);
        pnlRegisterHeader1.setLayout(pnlRegisterHeader1Layout);
        pnlRegisterHeader1Layout.setHorizontalGroup(
            pnlRegisterHeader1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRegisterHeader1Layout.createSequentialGroup()
                .addGap(607, 607, 607)
                .addComponent(lblRegisterUser)
                .addContainerGap(745, Short.MAX_VALUE))
        );
        pnlRegisterHeader1Layout.setVerticalGroup(
            pnlRegisterHeader1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRegisterHeader1Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(lblRegisterUser)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlRegisterHeaderLayout = new javax.swing.GroupLayout(pnlRegisterHeader);
        pnlRegisterHeader.setLayout(pnlRegisterHeaderLayout);
        pnlRegisterHeaderLayout.setHorizontalGroup(
            pnlRegisterHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlRegisterHeader1, javax.swing.GroupLayout.DEFAULT_SIZE, 1500, Short.MAX_VALUE)
        );
        pnlRegisterHeaderLayout.setVerticalGroup(
            pnlRegisterHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRegisterHeaderLayout.createSequentialGroup()
                .addComponent(pnlRegisterHeader1, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlMenu.setBackground(new java.awt.Color(40, 40, 40));

        btnRegisterUser.setBackground(new java.awt.Color(204, 0, 0));
        btnRegisterUser.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        btnRegisterUser.setForeground(new java.awt.Color(255, 255, 255));
        btnRegisterUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Forms/Images/Add1_Red.png"))); // NOI18N
        btnRegisterUser.setText("Register User");
        btnRegisterUser.setBorder(null);
        btnRegisterUser.setBorderPainted(false);
        btnRegisterUser.setContentAreaFilled(false);
        btnRegisterUser.setFocusPainted(false);
        btnRegisterUser.setIconTextGap(10);
        btnRegisterUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterUserActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(40, 40, 40));
        btnBack.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Forms/Images/Back1.png"))); // NOI18N
        btnBack.setText("Back");
        btnBack.setBorder(null);
        btnBack.setBorderPainted(false);
        btnBack.setContentAreaFilled(false);
        btnBack.setFocusPainted(false);
        btnBack.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnBack.setIconTextGap(70);
        btnBack.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Forms/Images/Back1_red.png"))); // NOI18N
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMenuLayout = new javax.swing.GroupLayout(pnlMenu);
        pnlMenu.setLayout(pnlMenuLayout);
        pnlMenuLayout.setHorizontalGroup(
            pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnRegisterUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
        );
        pnlMenuLayout.setVerticalGroup(
            pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenuLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(btnRegisterUser, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(814, Short.MAX_VALUE))
        );

        pnlSecurityQuestion.setBackground(new java.awt.Color(45, 45, 45));
        pnlSecurityQuestion.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblSecurityQuestion.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        lblSecurityQuestion.setForeground(new java.awt.Color(255, 255, 255));
        lblSecurityQuestion.setText("Security Question");

        lblChooseQuestion.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblChooseQuestion.setForeground(new java.awt.Color(255, 255, 255));
        lblChooseQuestion.setText("Choose Question:");

        txtAnswer.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtAnswer.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblAnswer.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblAnswer.setForeground(new java.awt.Color(255, 255, 255));
        lblAnswer.setText("Answer");

        cmbQuestion.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N

        javax.swing.GroupLayout pnlSecurityQuestionLayout = new javax.swing.GroupLayout(pnlSecurityQuestion);
        pnlSecurityQuestion.setLayout(pnlSecurityQuestionLayout);
        pnlSecurityQuestionLayout.setHorizontalGroup(
            pnlSecurityQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSecurityQuestionLayout.createSequentialGroup()
                .addGroup(pnlSecurityQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSecurityQuestionLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(lblSecurityQuestion))
                    .addGroup(pnlSecurityQuestionLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(pnlSecurityQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblChooseQuestion)
                            .addComponent(lblAnswer)
                            .addComponent(cmbQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(41, 47, Short.MAX_VALUE))
        );
        pnlSecurityQuestionLayout.setVerticalGroup(
            pnlSecurityQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSecurityQuestionLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblSecurityQuestion)
                .addGap(37, 37, 37)
                .addComponent(lblChooseQuestion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(lblAnswer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlLoginInfo.setBackground(new java.awt.Color(45, 45, 45));
        pnlLoginInfo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblLoginInfo.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        lblLoginInfo.setForeground(new java.awt.Color(255, 255, 255));
        lblLoginInfo.setText("Login Information");

        lblUsername.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblUsername.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername.setText("Username:");

        txtUsername.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtUsername.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtPassword.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtPassword.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblPassword.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblPassword.setForeground(new java.awt.Color(255, 255, 255));
        lblPassword.setText("Password:");

        lblRePassword.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblRePassword.setForeground(new java.awt.Color(255, 255, 255));
        lblRePassword.setText("Re-Enter Password:");

        txtStatus.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtStatus.setText("Pending");
        txtStatus.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblAccessLevel.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblAccessLevel.setForeground(new java.awt.Color(255, 255, 255));
        lblAccessLevel.setText("Access Level:");

        lblStatus.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(255, 255, 255));
        lblStatus.setText("Status");

        txtRePassword.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtRePassword.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtAccessLevel.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtAccessLevel.setText("Standard");
        txtAccessLevel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout pnlLoginInfoLayout = new javax.swing.GroupLayout(pnlLoginInfo);
        pnlLoginInfo.setLayout(pnlLoginInfoLayout);
        pnlLoginInfoLayout.setHorizontalGroup(
            pnlLoginInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginInfoLayout.createSequentialGroup()
                .addGroup(pnlLoginInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoginInfoLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(pnlLoginInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlLoginInfoLayout.createSequentialGroup()
                                .addComponent(lblUsername)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlLoginInfoLayout.createSequentialGroup()
                                .addGroup(pnlLoginInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRePassword)
                                    .addComponent(lblAccessLevel)
                                    .addComponent(lblPassword)
                                    .addComponent(lblStatus))
                                .addGap(76, 76, 76)
                                .addGroup(pnlLoginInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                                    .addComponent(txtStatus)
                                    .addComponent(txtRePassword, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtAccessLevel))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(pnlLoginInfoLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(lblLoginInfo)))
                .addGap(41, 41, 41))
        );
        pnlLoginInfoLayout.setVerticalGroup(
            pnlLoginInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginInfoLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblLoginInfo)
                .addGap(39, 39, 39)
                .addGroup(pnlLoginInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlLoginInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlLoginInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRePassword)
                    .addComponent(txtRePassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlLoginInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAccessLevel)
                    .addComponent(txtAccessLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlLoginInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        btnRegister.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        btnRegister.setText("Register");
        btnRegister.setFocusPainted(false);
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pnlLoginInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(pnlSecurityQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnRegister)))
                    .addComponent(pnlRegisterHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 1500, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(602, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlRegisterHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnlSecurityQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlLoginInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(btnRegister)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        frmRegisterUser register = new frmRegisterUser();
        register.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        String userName="", passWord="", passWordRe="", passWordTemp="", accessLevel="", status="", securityQuestion="", securityAwns="";
        Validation validation = new Validation();
        
        Department department;
        Contact contact;
        Address address;    
        User userToInsert;
        User user;
        UserSecurityQuestions userSec;
        SecurityQuestions secQuestion;
        
        if(!"".equals(txtUsername.getText()))
        {
            userName = txtUsername.getText();
            lblUsername.setForeground(Color.white);
            if((!"".equals(txtPassword.getText()))&&(!"".equals(txtRePassword.getText())))
            {
                passWord = txtPassword.getText();
                passWordRe = txtRePassword.getText();
                
                if(passWord.equals(passWordRe))
                {
                    if(validation.testLength(passWord, 8, 15))
                    {
                        try {
                            user = new User(userName,passWord);
                            c = new Communication(PersonManagement_Methods.USER_TEST_EXISTING.methodIdentifier,user);
                            boolean existingUser = new ClientHandler(c).request().boolResult;
                            
                            if(!existingUser)
                            {
                                lblUsername.setForeground(Color.white);
                                lblPassword.setForeground(Color.white);
                                lblRePassword.setForeground(Color.white);
                                accessLevel = txtAccessLevel.getText();
                                status = txtStatus.getText();
                                if(!"".equals(cmbQuestion.getSelectedItem().toString()))
                                {
                                    securityQuestion = cmbQuestion.getSelectedItem().toString();
                                    lblSecurityQuestion.setForeground(Color.white);
                                    if(!"".equals(txtAnswer.getText())) 
                                    {
                                        securityAwns = txtAnswer.getText();
                                        lblAnswer.setForeground(Color.white);
                                        
                                        userToInsert = new User(person, userName, passWord, accessLevel, status);
                                        secQuestion = new SecurityQuestions(securityQuestion);
                                        userSec = new UserSecurityQuestions(userToInsert, secQuestion, securityAwns);
                                        
                                        boolean success = true;
                                   
                                        c = new Communication(PersonManagement_Methods.PERSON_INSERT.methodIdentifier,person);
                                        int personSuccess = new ClientHandler(c).request().intResult;
                                        if (personSuccess == -1)
                                        {
                                            success = false;
                                        }
                                        
                                        c = new Communication(PersonManagement_Methods.USER_INSERT.methodIdentifier,userToInsert);
                                        int userSuccess = new ClientHandler(c).request().intResult;
                                        if (userSuccess == -1)
                                        {
                                            success = false;
                                        }
                                        
                                        c = new Communication(PersonManagement_Methods.USQ_INSERT.methodIdentifier, userSec);
                                        int userSecSuccess = new ClientHandler(c).request().intResult;
                                        if (userSecSuccess == -1)
                                        {
                                            success = false;
                                        }
                                        
                                        if (success)
                                        {
                                            JOptionPane.showMessageDialog(null, "The user was successfully registered","Registration Successful",JOptionPane.INFORMATION_MESSAGE);
                                            
                                            frmLogin login = new frmLogin();
                                            login.setVisible(true);
                                            this.setVisible(false);
                                        }
                                        else
                                        {
                                            JOptionPane.showMessageDialog(null, "Something went wrong during the registration process. User Registration was unsuccessful!","Registration Failed",JOptionPane.WARNING_MESSAGE);
                                        }
                                    }
                                    else
                                    {
                                        JOptionPane.showMessageDialog(null, "Please Enter an Answer to the Security Question!","Incorrect Security Answer",JOptionPane.WARNING_MESSAGE);
                                        lblAnswer.setForeground(Color.red);
                                    }
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(null, "Please choose a Security Question!","Incorrect Security Question",JOptionPane.WARNING_MESSAGE);
                                    lblSecurityQuestion.setForeground(Color.red);
                                }
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "This user already exists. Please Try Again!","Existing User already registered",JOptionPane.WARNING_MESSAGE);
                                txtUsername.setText("");
                                txtPassword.setText("");
                                txtRePassword.setText("");
                                txtUsername.grabFocus();
                                lblUsername.setForeground(Color.red);
                                lblPassword.setForeground(Color.red);
                                lblRePassword.setForeground(Color.red);
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(frmRegisterUserLogin.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "These fields must be at least 8 characters long and no greater than 15 characters. Please Try Again!","Incorrect Password",JOptionPane.WARNING_MESSAGE);
                        txtPassword.setText("");
                        txtRePassword.setText("");
                        txtPassword.grabFocus();
                        lblPassword.setForeground(Color.red);
                        lblRePassword.setForeground(Color.red);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "These fields must be the same. Please Try Again!","Incorrect Password",JOptionPane.WARNING_MESSAGE);
                    txtPassword.setText("");
                    txtRePassword.setText("");
                    txtPassword.grabFocus();
                    lblPassword.setForeground(Color.red);
                    lblRePassword.setForeground(Color.red);
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "These fields may not be empty. Please Try Again!","Incorrect Password",JOptionPane.WARNING_MESSAGE);
                txtPassword.setText("");
                txtRePassword.setText("");
                txtPassword.grabFocus();
                lblPassword.setForeground(Color.red);
                lblRePassword.setForeground(Color.red);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "This field may not be empty. Please Try Again!","Incorrect Username",JOptionPane.WARNING_MESSAGE);
            txtUsername.setText("");
            txtUsername.grabFocus();
            lblUsername.setForeground(Color.red);
        } 
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void btnRegisterUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRegisterUserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmRegisterUserLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmRegisterUserLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmRegisterUserLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmRegisterUserLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmRegisterUserLogin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRegister;
    private javax.swing.JButton btnRegisterUser;
    private javax.swing.JComboBox<String> cmbQuestion;
    private javax.swing.JLabel lblAccessLevel;
    private javax.swing.JLabel lblAnswer;
    private javax.swing.JLabel lblChooseQuestion;
    private javax.swing.JLabel lblLoginInfo;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRePassword;
    private javax.swing.JLabel lblRegisterUser;
    private javax.swing.JLabel lblSecurityQuestion;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JPanel pnlLoginInfo;
    private javax.swing.JPanel pnlMenu;
    private javax.swing.JPanel pnlRegisterHeader;
    private javax.swing.JPanel pnlRegisterHeader1;
    private javax.swing.JPanel pnlSecurityQuestion;
    private javax.swing.JTextField txtAccessLevel;
    private javax.swing.JTextField txtAnswer;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtRePassword;
    private javax.swing.JTextField txtStatus;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
