/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import PersonManagement.Person;
import PersonManagement.PersonManagement_Methods;
import PersonManagement.User;
import ProductManagement.Order;
import ProductManagement.OrderItems;
import ProductManagement.Product;
import ProductManagement.ProductManagement_Methods;
import ProductManagement.Stock;
import ProductManagement.UserRequest;
import bc_stationary_bll.Communication;
import bc_stationary_bll.Email;
import bc_stationary_bll.Reporting;
import bc_stationary_bll.genericSort;
import bc_stationary_management_system.ClientHandler;
import java.awt.Color;
import java.io.IOException;
import java.sql.Date;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.util.converter.LocalDateStringConverter;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Eldane
 */
public class frmManageOrders extends javax.swing.JFrame {

    /**
     * Creates new form frmManageOrders
     */
    public ArrayList<Product> products;
    Communication c;
    public frmManageOrders() {
        try {
            initComponents();
            this.setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);
            this.getContentPane().setBackground(new Color(45, 45, 45));
            btnPurchase.setVisible(false);
            btnOrder.setVisible(false);
            
            UserRequest request = new UserRequest();
            c = new Communication(ProductManagement_Methods.UR_SELECT_PRODUCTS_ONREQ.methodIdentifier, request);
            products = new ClientHandler(c).request().listResult;
            
            cmbProduct.addItem("Select a Product:");
            for (Product p : products) {
                cmbProduct.addItem(p.getName() + "(" + p.getDescription() + "-" + p.getModel().getDescription() + ")");
            }
            
            txtProductName.setEditable(false);
            txtDescription.setEditable(false);
            txtCategory.setEditable(false);
            txtProductModel.setEditable(false);
            txtQuantity.setEditable(false);
            txtPriority.setEditable(false);
            txtRequestDate.setEditable(false);
        } catch (IOException ex) {
            Logger.getLogger(frmManageOrders.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMainDashHeader = new javax.swing.JPanel();
        pnlRegisterHeader1 = new javax.swing.JPanel();
        lblAddRequest = new javax.swing.JLabel();
        pnlMenu = new javax.swing.JPanel();
        btnAddRequest = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnEditRequest = new javax.swing.JButton();
        lblSearchUsers = new javax.swing.JLabel();
        cmbProduct = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        lbxUsers = new javax.swing.JList<>();
        pnlProjectInfo = new javax.swing.JPanel();
        lblProductInfo = new javax.swing.JLabel();
        lblProductName = new javax.swing.JLabel();
        txtProductName = new javax.swing.JTextField();
        txtDescription = new javax.swing.JTextField();
        lblDescription = new javax.swing.JLabel();
        lblCategory = new javax.swing.JLabel();
        lblProductModel = new javax.swing.JLabel();
        txtProductModel = new javax.swing.JTextField();
        txtCategory = new javax.swing.JTextField();
        pnlProjectInfo2 = new javax.swing.JPanel();
        lblRequestInfo = new javax.swing.JLabel();
        lblLoggedUser = new javax.swing.JLabel();
        txtStaffMember = new javax.swing.JTextField();
        lblRequestDate = new javax.swing.JLabel();
        txtRequestDate = new javax.swing.JTextField();
        lblQuantity = new javax.swing.JLabel();
        lblPriority = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        txtPriority = new javax.swing.JTextField();
        pnlProjectInfo3 = new javax.swing.JPanel();
        lblRequestInfo1 = new javax.swing.JLabel();
        lblLoggedUser1 = new javax.swing.JLabel();
        lblOrderStatus = new javax.swing.JLabel();
        txtQuantityInStock = new javax.swing.JTextField();
        btnOrder = new javax.swing.JButton();
        btnPurchase = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        pnlMainDashHeader.setBackground(new java.awt.Color(255, 255, 0));
        pnlMainDashHeader.setPreferredSize(new java.awt.Dimension(1071, 530));

        pnlRegisterHeader1.setBackground(new java.awt.Color(204, 0, 0));
        pnlRegisterHeader1.setPreferredSize(new java.awt.Dimension(1307, 65));

        lblAddRequest.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        lblAddRequest.setForeground(new java.awt.Color(255, 255, 255));
        lblAddRequest.setText("Manage Requests");
        lblAddRequest.setAlignmentY(0.0F);

        javax.swing.GroupLayout pnlRegisterHeader1Layout = new javax.swing.GroupLayout(pnlRegisterHeader1);
        pnlRegisterHeader1.setLayout(pnlRegisterHeader1Layout);
        pnlRegisterHeader1Layout.setHorizontalGroup(
            pnlRegisterHeader1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRegisterHeader1Layout.createSequentialGroup()
                .addGap(607, 607, 607)
                .addComponent(lblAddRequest)
                .addContainerGap(684, Short.MAX_VALUE))
        );
        pnlRegisterHeader1Layout.setVerticalGroup(
            pnlRegisterHeader1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRegisterHeader1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblAddRequest)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlMainDashHeaderLayout = new javax.swing.GroupLayout(pnlMainDashHeader);
        pnlMainDashHeader.setLayout(pnlMainDashHeaderLayout);
        pnlMainDashHeaderLayout.setHorizontalGroup(
            pnlMainDashHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlRegisterHeader1, javax.swing.GroupLayout.DEFAULT_SIZE, 1500, Short.MAX_VALUE)
        );
        pnlMainDashHeaderLayout.setVerticalGroup(
            pnlMainDashHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainDashHeaderLayout.createSequentialGroup()
                .addComponent(pnlRegisterHeader1, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlMenu.setBackground(new java.awt.Color(40, 40, 40));

        btnAddRequest.setBackground(new java.awt.Color(204, 0, 0));
        btnAddRequest.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        btnAddRequest.setForeground(new java.awt.Color(255, 255, 255));
        btnAddRequest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Forms/Images/reactivate_Red.png"))); // NOI18N
        btnAddRequest.setText("Manage Requests");
        btnAddRequest.setBorder(null);
        btnAddRequest.setBorderPainted(false);
        btnAddRequest.setContentAreaFilled(false);
        btnAddRequest.setFocusPainted(false);
        btnAddRequest.setIconTextGap(10);
        btnAddRequest.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Forms/Images/reactivate_Red.png"))); // NOI18N

        btnBack.setBackground(new java.awt.Color(204, 0, 0));
        btnBack.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Forms/Images/Back1.png"))); // NOI18N
        btnBack.setText("Main Dash");
        btnBack.setBorder(null);
        btnBack.setBorderPainted(false);
        btnBack.setContentAreaFilled(false);
        btnBack.setFocusPainted(false);
        btnBack.setIconTextGap(68);
        btnBack.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Forms/Images/Back1_red.png"))); // NOI18N
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnEditRequest.setBackground(new java.awt.Color(204, 0, 0));
        btnEditRequest.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        btnEditRequest.setForeground(new java.awt.Color(255, 255, 255));
        btnEditRequest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Forms/Images/View.png"))); // NOI18N
        btnEditRequest.setText("Finalize Orders");
        btnEditRequest.setBorder(null);
        btnEditRequest.setBorderPainted(false);
        btnEditRequest.setContentAreaFilled(false);
        btnEditRequest.setFocusPainted(false);
        btnEditRequest.setIconTextGap(40);
        btnEditRequest.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Forms/Images/View_Red.png"))); // NOI18N
        btnEditRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditRequestMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlMenuLayout = new javax.swing.GroupLayout(pnlMenu);
        pnlMenu.setLayout(pnlMenuLayout);
        pnlMenuLayout.setHorizontalGroup(
            pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddRequest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEditRequest, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlMenuLayout.setVerticalGroup(
            pnlMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMenuLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(btnAddRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEditRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(812, Short.MAX_VALUE))
        );

        lblSearchUsers.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblSearchUsers.setForeground(new java.awt.Color(255, 255, 255));
        lblSearchUsers.setText("Select a User:");

        cmbProduct.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        cmbProduct.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmbProductPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        lbxUsers.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lbxUsers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lbxUsersValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lbxUsers);

        pnlProjectInfo.setBackground(new java.awt.Color(45, 45, 45));
        pnlProjectInfo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblProductInfo.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        lblProductInfo.setForeground(new java.awt.Color(255, 255, 255));
        lblProductInfo.setText("Product Information");

        lblProductName.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblProductName.setForeground(new java.awt.Color(255, 255, 255));
        lblProductName.setText("Product Name:");

        txtProductName.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtProductName.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtDescription.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtDescription.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblDescription.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblDescription.setForeground(new java.awt.Color(255, 255, 255));
        lblDescription.setText("Description:");

        lblCategory.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblCategory.setForeground(new java.awt.Color(255, 255, 255));
        lblCategory.setText("Category:");

        lblProductModel.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblProductModel.setForeground(new java.awt.Color(255, 255, 255));
        lblProductModel.setText("Model:");

        txtProductModel.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtProductModel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtCategory.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtCategory.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout pnlProjectInfoLayout = new javax.swing.GroupLayout(pnlProjectInfo);
        pnlProjectInfo.setLayout(pnlProjectInfoLayout);
        pnlProjectInfoLayout.setHorizontalGroup(
            pnlProjectInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProjectInfoLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(pnlProjectInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblProductName)
                    .addComponent(lblProductModel)
                    .addComponent(lblProductInfo))
                .addGap(10, 10, 10)
                .addGroup(pnlProjectInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlProjectInfoLayout.createSequentialGroup()
                        .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblDescription))
                    .addGroup(pnlProjectInfoLayout.createSequentialGroup()
                        .addComponent(txtProductModel, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblCategory)))
                .addGap(41, 41, 41)
                .addGroup(pnlProjectInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlProjectInfoLayout.setVerticalGroup(
            pnlProjectInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProjectInfoLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblProductInfo)
                .addGap(18, 18, 18)
                .addGroup(pnlProjectInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProductName)
                    .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDescription)
                    .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlProjectInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlProjectInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCategory)
                        .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlProjectInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblProductModel)
                        .addComponent(txtProductModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pnlProjectInfo2.setBackground(new java.awt.Color(45, 45, 45));
        pnlProjectInfo2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblRequestInfo.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        lblRequestInfo.setForeground(new java.awt.Color(255, 255, 255));
        lblRequestInfo.setText("Request Information");

        lblLoggedUser.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblLoggedUser.setForeground(new java.awt.Color(255, 255, 255));
        lblLoggedUser.setText("Staff member:");

        txtStaffMember.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtStaffMember.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblRequestDate.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblRequestDate.setForeground(new java.awt.Color(255, 255, 255));
        lblRequestDate.setText("Request Date:");

        txtRequestDate.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtRequestDate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblQuantity.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblQuantity.setForeground(new java.awt.Color(255, 255, 255));
        lblQuantity.setText("Quantity Requested:");

        lblPriority.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblPriority.setForeground(new java.awt.Color(255, 255, 255));
        lblPriority.setText("Priority of Request:");

        txtQuantity.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtQuantity.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtPriority.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtPriority.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        pnlProjectInfo3.setBackground(new java.awt.Color(45, 45, 45));
        pnlProjectInfo3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblRequestInfo1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        lblRequestInfo1.setForeground(new java.awt.Color(255, 255, 255));
        lblRequestInfo1.setText("Stock Information");

        lblLoggedUser1.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        lblLoggedUser1.setForeground(new java.awt.Color(255, 255, 255));
        lblLoggedUser1.setText("Quantity In Stock:");

        lblOrderStatus.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblOrderStatus.setForeground(new java.awt.Color(255, 255, 0));
        lblOrderStatus.setText("Status");

        txtQuantityInStock.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtQuantityInStock.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout pnlProjectInfo3Layout = new javax.swing.GroupLayout(pnlProjectInfo3);
        pnlProjectInfo3.setLayout(pnlProjectInfo3Layout);
        pnlProjectInfo3Layout.setHorizontalGroup(
            pnlProjectInfo3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProjectInfo3Layout.createSequentialGroup()
                .addGroup(pnlProjectInfo3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlProjectInfo3Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(pnlProjectInfo3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRequestInfo1)
                            .addComponent(lblLoggedUser1)
                            .addComponent(txtQuantityInStock, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlProjectInfo3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblOrderStatus)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        pnlProjectInfo3Layout.setVerticalGroup(
            pnlProjectInfo3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProjectInfo3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblRequestInfo1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblLoggedUser1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtQuantityInStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(lblOrderStatus)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        btnOrder.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        btnOrder.setText("Order");
        btnOrder.setBorderPainted(false);
        btnOrder.setFocusPainted(false);
        btnOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOrderMouseClicked(evt);
            }
        });

        btnPurchase.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        btnPurchase.setText("Send Purchase Order");
        btnPurchase.setBorderPainted(false);
        btnPurchase.setFocusPainted(false);
        btnPurchase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPurchaseMouseClicked(evt);
            }
        });
        btnPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPurchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlProjectInfo2Layout = new javax.swing.GroupLayout(pnlProjectInfo2);
        pnlProjectInfo2.setLayout(pnlProjectInfo2Layout);
        pnlProjectInfo2Layout.setHorizontalGroup(
            pnlProjectInfo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlProjectInfo2Layout.createSequentialGroup()
                .addGroup(pnlProjectInfo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlProjectInfo2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlProjectInfo2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPurchase))
                    .addGroup(pnlProjectInfo2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(pnlProjectInfo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlProjectInfo2Layout.createSequentialGroup()
                                .addComponent(lblPriority)
                                .addGap(64, 64, 64)
                                .addComponent(txtPriority))
                            .addComponent(lblRequestInfo)
                            .addGroup(pnlProjectInfo2Layout.createSequentialGroup()
                                .addGroup(pnlProjectInfo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblQuantity)
                                    .addComponent(lblRequestDate)
                                    .addComponent(lblLoggedUser))
                                .addGap(41, 41, 41)
                                .addGroup(pnlProjectInfo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtStaffMember, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtRequestDate)
                                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addComponent(pnlProjectInfo3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(120, 120, 120))
        );
        pnlProjectInfo2Layout.setVerticalGroup(
            pnlProjectInfo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProjectInfo2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlProjectInfo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlProjectInfo2Layout.createSequentialGroup()
                        .addComponent(lblRequestInfo)
                        .addGap(32, 32, 32)
                        .addGroup(pnlProjectInfo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLoggedUser)
                            .addComponent(txtStaffMember, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlProjectInfo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRequestDate)
                            .addComponent(txtRequestDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlProjectInfo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblQuantity)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(pnlProjectInfo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPriority)
                            .addComponent(txtPriority, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlProjectInfo2Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(pnlProjectInfo3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPurchase)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(btnOrder)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMainDashHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 1500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbProduct, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchUsers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlProjectInfo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlProjectInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(466, 466, 466))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMainDashHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(cmbProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblSearchUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pnlProjectInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlProjectInfo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1))))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        AdministratorMainDash mainDash = new AdministratorMainDash();
        mainDash.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed

    public Product selectedProduct;
    ArrayList<UserRequest> allRequests;
    public UserRequest selectedRequest;
    public int stockQuantity = 0, requestQuantity = 0;
    private void lbxUsersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lbxUsersValueChanged
        try {
            int index = lbxUsers.getSelectedIndex();
            String priority = "";
            String userFullName = "";
            int priorityLevel = 0;
            btnOrder.setVisible(false);
            btnPurchase.setVisible(false);
            
            if (index == -1) {
                index = 0;
            }
            
            selectedRequest = allRequests.get(index);
            
            txtProductName.setText(selectedProduct.getName());
            txtProductName.setEditable(false);
            
            txtDescription.setText(selectedProduct.getDescription());
            txtDescription.setEditable(false);
            
            txtCategory.setText(selectedProduct.getCategory().getDescription());
            txtCategory.setEditable(false);
            
            txtProductModel.setText(selectedProduct.getModel().getDescription());
            txtProductModel.setEditable(false);
            
            Person p = new Person();
            User u = selectedRequest.getUser();
            c = new Communication(PersonManagement_Methods.USER_SELECT_SPEC.methodIdentifier, u);
            u = (User)new ClientHandler(c).request().objectResult;
            p = u.getPerson();
            
            userFullName = p.getName() + " " + p.getSurname();
            txtStaffMember.setText(userFullName);
            txtStaffMember.setEditable(false);
            
            requestQuantity = selectedRequest.getQuantity();
            txtQuantity.setText(Integer.toString(requestQuantity));
            txtQuantity.setEditable(false);
            
            priorityLevel = selectedRequest.getPriorityLevel();
            switch (priorityLevel) {
                case 1:
                    priority = "Low";
                    break;
                case 2:
                    priority = "Medium";
                    break;
                case 3:
                    priority = "High";
                    break;
                default:
                    break;
            }
            
            txtPriority.setText(priority);
            txtPriority.setEditable(false);
            
            txtRequestDate.setText(selectedRequest.getReqDate().toString());
            txtRequestDate.setEditable(false);
            
            Stock stock = new Stock(selectedProduct, 0);
            stockQuantity = stock.selectSpecStock().getQuantity();
            
            txtQuantityInStock.setText(Integer.toString(stockQuantity));
            txtQuantityInStock.setEditable(false);
            
            if (stockQuantity == 0) {
                lblOrderStatus.setText("        Out of Stock");
                btnPurchase.setVisible(true);
            }
            else if (requestQuantity > stockQuantity) {
                lblOrderStatus.setText("Insufficient quantity to fully fill order");
                btnOrder.setVisible(true);
            }
            else if(requestQuantity <= stockQuantity)
            {
                lblOrderStatus.setText("Enough quantity items to fill this order.");
                btnOrder.setVisible(true);
            }
        } catch (IOException ex) {
            Logger.getLogger(frmManageOrders.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_lbxUsersValueChanged

    private void btnPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPurchaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPurchaseActionPerformed

    private void cmbProductPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmbProductPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        if (cmbProduct.getSelectedIndex() > 0) {
            try {
                String selectedProductSearch = cmbProduct.getSelectedItem().toString();
                String searchedProduct = selectedProductSearch.substring(0, selectedProductSearch.indexOf("("));
                String searchedDescription = selectedProductSearch.substring(selectedProductSearch.indexOf("(") + 1, selectedProductSearch.indexOf("-"));
                String searchedModel = selectedProductSearch.substring(selectedProductSearch.indexOf("-") + 1, selectedProductSearch.indexOf(")"));
                
                selectedProduct = new Product();
                for (Product p : products) {
                    if ((p.getName().equals(searchedProduct) && (p.getDescription().equals(searchedDescription)) && (p.getModel().getDescription().equals(searchedModel)))) {
                        selectedProduct = p;
                    }
                }
                UserRequest request = new UserRequest(selectedProduct);
                c = new Communication(ProductManagement_Methods.UR_SELECT_PRODUCT_BACKORDER.methodIdentifier,request);
                allRequests = new ClientHandler(c).request().listResult;
                try {
                    Collections.sort(allRequests, new genericSort(UserRequest.class.getField("priorityLevel")));
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(frmManageOrders.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoSuchFieldException ex) {
                    Logger.getLogger(frmManageOrders.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SecurityException ex) {
                    Logger.getLogger(frmManageOrders.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                DefaultListModel model = new DefaultListModel();
                // Populate Listbox
                for (UserRequest ur : allRequests) {
                    model.addElement(ur.getUser().getUsername());
                }
                
                lbxUsers.setModel(model);
            } catch (IOException ex) {
                Logger.getLogger(frmManageOrders.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            frmManageOrders orders = new frmManageOrders();
            orders.setVisible(true);
            this.setVisible(false);
        }
    }//GEN-LAST:event_cmbProductPopupMenuWillBecomeInvisible

    private void btnOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOrderMouseClicked
        try {
            User selectedUser = selectedRequest.getUser();
            LocalDate localOrder = LocalDate.now();
            Date orderDate = Date.valueOf(localOrder);
            LocalDate localReceive = LocalDate.now().minusDays(1);
            Date receiveDate = Date.valueOf(localReceive);
            
            UserRequest requestToUpdate;
            Stock stockToUpdate;
            Product productToUpdate;
            Order orderToUpdate;
            int newStockQuantity, initialRequestQuantity = 0, remainingRequestQuantity;
            boolean stockInsufficient = false; // Not out of stock, but also not enough to fill whole order.
            
            if((stockQuantity > 0)&&(stockQuantity < requestQuantity))
            {
                initialRequestQuantity = requestQuantity;
                requestQuantity = stockQuantity;
                stockInsufficient = true;
            }   ArrayList<OrderItems> items = new ArrayList<OrderItems>();
            
            items.add(new OrderItems(selectedProduct,requestQuantity));
            Order order = new Order(selectedUser);
            c = new Communication(ProductManagement_Methods.ORDER_SELECT_USER_OPEN.methodIdentifier, order);
            orderToUpdate = (Order)new ClientHandler(c).request().objectResult;
            if(orderToUpdate != null)
            {
                OrderItems orderItem = new OrderItems(selectedProduct,requestQuantity,orderToUpdate);
                try {
                    c = new Communication(ProductManagement_Methods.ORDER_ITEMS_INSERT.methodIdentifier,orderItem);
                    int orderItemInsertSuccess = new ClientHandler(c).request().intResult;
                    if(orderItemInsertSuccess != -1)
                    {
                        requestToUpdate = new UserRequest(selectedUser,selectedProduct,selectedRequest.getQuantity(),selectedRequest.getPriorityLevel(),"Partially Processed",selectedRequest.getReqDate(),
                                selectedRequest.getCompletedDate());
                        c = new Communication(ProductManagement_Methods.UR_UPDATE.methodIdentifier,requestToUpdate);
                        int requestUpdateSuccess = new ClientHandler(c).request().intResult;
                        if(requestUpdateSuccess != -1)
                        {
                            newStockQuantity = stockQuantity - requestQuantity;
                            if(newStockQuantity == 0)
                            {
                                stockToUpdate = new Stock(selectedProduct,newStockQuantity);
                                c = new Communication(ProductManagement_Methods.STOCK_UPDATE.methodIdentifier, stockToUpdate);
                                int stockUpdateSuccess =  new ClientHandler(c).request().intResult;
                                if(stockUpdateSuccess != -1)
                                {
                                    productToUpdate = new Product(selectedProduct.getName(),selectedProduct.getDescription(),selectedProduct.getCategory(),"Unavailable",selectedProduct.getModel(),
                                            selectedProduct.getCostPrice(), selectedProduct.getSalesPrice(), selectedProduct.getEntryDate());
                                    c = new Communication(ProductManagement_Methods.PRODUCT_UPDATE.methodIdentifier,productToUpdate);
                                    int productUpdateSuccess = new ClientHandler(c).request().intResult;
                                    
                                    if(productUpdateSuccess != -1)
                                    {
                                        if(stockInsufficient)
                                        {
                                            remainingRequestQuantity = initialRequestQuantity - requestQuantity;
                                            UserRequest newRequest = new UserRequest(selectedUser,selectedProduct,remainingRequestQuantity,selectedRequest.getPriorityLevel(),"Unprocessed",orderDate,receiveDate);
                                            c = new Communication(ProductManagement_Methods.UR_INSERT.methodIdentifier,newRequest);
                                            int requestInsertSuccess = new ClientHandler(c).request().intResult;
                                            if(requestInsertSuccess != -1)
                                            {
                                                String message = requestQuantity + " items out of a total of "+initialRequestQuantity+" items was ordered. The remaining "+ remainingRequestQuantity+" items should be purchased in order to fully fill this order.";
                                                JOptionPane.showMessageDialog(null, message, "Notice of partial order fufillment", JOptionPane.INFORMATION_MESSAGE);
                                                
                                                JOptionPane.showMessageDialog(null, "Item was successfully ordered!", "Successful Order Upload", JOptionPane.INFORMATION_MESSAGE);
                                                frmManageOrders manageOrders = new frmManageOrders();
                                                manageOrders.setVisible(true);
                                                this.setVisible(false);
                                            }
                                            
                                        }
                                        else
                                        {
                                            JOptionPane.showMessageDialog(null, "Item was successfully ordered!", "Successful Order Upload", JOptionPane.INFORMATION_MESSAGE);
                                            frmManageOrders manageOrders = new frmManageOrders();
                                            manageOrders.setVisible(true);
                                            this.setVisible(false);
                                        }    
                                    }
                                    else
                                    {
                                        JOptionPane.showMessageDialog(null, "Something went wrong! Item was not successfully ordered.", "Unsuccessful Order Upload", JOptionPane.WARNING_MESSAGE);                                   
                                        frmManageOrders manageOrders = new frmManageOrders();
                                        manageOrders.setVisible(true);
                                        this.setVisible(false);
                                    }
                                }
                            }
                            else
                            {
                                stockToUpdate = new Stock(selectedProduct,newStockQuantity);
                                c = new Communication(ProductManagement_Methods.STOCK_UPDATE.methodIdentifier, stockToUpdate);
                                int stockUpdateSuccess =  new ClientHandler(c).request().intResult;
                                if(stockUpdateSuccess != -1)
                                {
                                    if(stockInsufficient)
                                    {
                                        remainingRequestQuantity = initialRequestQuantity - requestQuantity;
                                        UserRequest newRequest = new UserRequest(selectedUser,selectedProduct,remainingRequestQuantity,selectedRequest.getPriorityLevel(),"Unprocessed",orderDate,receiveDate);
                                        c = new Communication(ProductManagement_Methods.UR_INSERT.methodIdentifier,newRequest);
                                        int requestInsertSuccess = new ClientHandler(c).request().intResult;
                                        
                                        if(requestInsertSuccess != -1)
                                        {
                                            String message = requestQuantity + " items out of a total of "+initialRequestQuantity+" items was ordered. The remaining "+ remainingRequestQuantity+" items should be purchased in order to fully fill this order.";
                                            JOptionPane.showMessageDialog(null, message, "Notice of partial order fufillment", JOptionPane.INFORMATION_MESSAGE);
                                            
                                            JOptionPane.showMessageDialog(null, "Item was successfully ordered!", "Successful Order Upload", JOptionPane.INFORMATION_MESSAGE);
                                            frmManageOrders manageOrders = new frmManageOrders();
                                            manageOrders.setVisible(true);
                                            this.setVisible(false);
                                        }
                                        
                                    }
                                    else
                                    {
                                        JOptionPane.showMessageDialog(null, "Item was successfully ordered!", "Successful Order Upload", JOptionPane.INFORMATION_MESSAGE);
                                        frmManageOrders manageOrders = new frmManageOrders();
                                        manageOrders.setVisible(true);
                                        this.setVisible(false);
                                    }   
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(null, "Something went wrong! Item was not successfully ordered.", "Unsuccessful Order Upload", JOptionPane.WARNING_MESSAGE);
                                    frmManageOrders manageOrders = new frmManageOrders();
                                    manageOrders.setVisible(true);
                                    this.setVisible(false);
                                }
                            }
                        }

                    }
                } catch (IOException ex) {                    
                    Logger.getLogger(frmManageOrders.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
            {
                order = new Order(selectedUser,orderDate,receiveDate,items);
                c = new Communication(ProductManagement_Methods.ORDER_INSERT.methodIdentifier, order);
                int orderInsertSuccess =  new ClientHandler(c).request().intResult;
                if(orderInsertSuccess != -1)
                {
                    requestToUpdate = new UserRequest(selectedUser,selectedProduct,selectedRequest.getQuantity(),selectedRequest.getPriorityLevel(),"Partially Processed",selectedRequest.getReqDate(),
                            selectedRequest.getCompletedDate());
                    c = new Communication(ProductManagement_Methods.UR_UPDATE.methodIdentifier,requestToUpdate);
                    int requestUpdateSuccess = new ClientHandler(c).request().intResult;
                                        
                    if(requestUpdateSuccess != -1)
                    {
                        newStockQuantity = stockQuantity - requestQuantity;
                        if(newStockQuantity == 0)
                        {
                            stockToUpdate = new Stock(selectedProduct,newStockQuantity);
                            c = new Communication(ProductManagement_Methods.STOCK_UPDATE.methodIdentifier, stockToUpdate);
                            int stockUpdateSuccess = new ClientHandler(c).request().intResult;
                            
                            if(stockUpdateSuccess != -1)
                            {
                                productToUpdate = new Product(selectedProduct.getName(),selectedProduct.getDescription(),selectedProduct.getCategory(),"Not Available",selectedProduct.getModel(),
                                        selectedProduct.getCostPrice(), selectedProduct.getSalesPrice(), selectedProduct.getEntryDate());
                                c = new Communication(ProductManagement_Methods.PRODUCT_UPDATE.methodIdentifier, productToUpdate);
                                int productUpdateSuccess = new ClientHandler(c).request().intResult;
                                
                                if(productUpdateSuccess != -1)
                                {
                                    JOptionPane.showMessageDialog(null, "Item was successfully ordered!", "Successful Order Upload", JOptionPane.INFORMATION_MESSAGE);
                                    frmManageOrders manageOrders = new frmManageOrders();
                                    manageOrders.setVisible(true);
                                    this.setVisible(false);
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(null, "Something went wrong! Item was not successfully ordered.", "Unsuccessful Order Upload", JOptionPane.WARNING_MESSAGE);
                                    frmManageOrders manageOrders = new frmManageOrders();
                                    manageOrders.setVisible(true);
                                    this.setVisible(false);
                                }
                            }
                        }
                        else
                        {
                            stockToUpdate = new Stock(selectedProduct,newStockQuantity);
                            c = new Communication(ProductManagement_Methods.STOCK_UPDATE.methodIdentifier, stockToUpdate);
                            int stockUpdateSuccess = new ClientHandler(c).request().intResult;
                            
                            if(stockUpdateSuccess != -1)
                            {
                                JOptionPane.showMessageDialog(null, "Item was successfully ordered!", "Successful Order Upload", JOptionPane.INFORMATION_MESSAGE);
                                frmManageOrders manageOrders = new frmManageOrders();
                                manageOrders.setVisible(true);
                                this.setVisible(false);
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "Something went wrong! Item was not successfully ordered.", "Unsuccessful Order Upload", JOptionPane.WARNING_MESSAGE);
                                frmManageOrders manageOrders = new frmManageOrders();
                                manageOrders.setVisible(true);
                                this.setVisible(false);
                            }
                        }
                    }
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(frmManageOrders.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnOrderMouseClicked

    private void btnPurchaseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPurchaseMouseClicked
        // TODO add your handling code here:
        ArrayList<Stock> stockItems = new ArrayList<Stock>();
        UserRequest requestToUpdate = new UserRequest(selectedRequest.getUser(),selectedProduct,selectedRequest.getQuantity(),selectedRequest.getPriorityLevel(),"Back Ordered",selectedRequest.getReqDate(),selectedRequest.getCompletedDate());
        
        int answer = JOptionPane.showConfirmDialog(null, "Do you want to purchase more items than the requested amount?","Order Additional Quantity",JOptionPane.YES_NO_OPTION);
        if(answer == 0)// yes
        {
            try {
                int quantity = Integer.parseInt(JOptionPane.showInputDialog(null,"How many items do you want to purchase?","Specify Quantity",JOptionPane.QUESTION_MESSAGE));
                stockItems.add(new Stock(selectedProduct,quantity));
                c = new Communication(ProductManagement_Methods.UR_UPDATE.methodIdentifier, requestToUpdate);
                int requestUpdateSuccess =  new ClientHandler(c).request().intResult;
                
                if(requestUpdateSuccess != -1)
                {
                    String docName = "stockPurchaseOrder_"+selectedProduct.getName()+".pdf";
                    Reporting report = new Reporting(stockItems, docName);
                    report.generatePurchaseOrder();
                    String message = "Please find attached, to this mail, the purchase order for Product Name: " + selectedProduct.getName();
                    String path = "C:\\Users\\Eldane\\Documents\\NetBeansProjects\\BC_Stationary_Management_System\\"+docName;
                    Email email = new Email("eldanefer1@gmail.com", message, "Purchase Order Form", path);
                    email.sendEmail();
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Something went wrong! Purchase order was not successfully sent.", "Purchase Order Unsuccessfully Send ", JOptionPane.WARNING_MESSAGE);
                    frmManageOrders manageOrders = new frmManageOrders();
                    manageOrders.setVisible(true);
                    this.setVisible(false);
                }
            } catch (IOException ex) {
                Logger.getLogger(frmManageOrders.class.getName()).log(Level.SEVERE, null, ex);
            }
           
        }
        else
        {
            try {
                c = new Communication(ProductManagement_Methods.UR_UPDATE.methodIdentifier, requestToUpdate);
                int requestUpdateSuccess = new ClientHandler(c).request().intResult;
                
                if(requestUpdateSuccess != -1)
                {
                    //JOptionPane.showMessageDialog(null, "The requested quantity was send for purchase", "Purchase Order Send", JOptionPane.INFORMATION_MESSAGE);
                    stockItems.add(new Stock(selectedProduct,requestQuantity));
                    String docName = "stockPurchaseOrder_"+selectedProduct.getName()+".pdf";
                    Reporting report = new Reporting(stockItems, docName);
                    report.generatePurchaseOrder();
                    String message = "Please find attached, to this mail, the purchase order for Product Name: " + selectedProduct.getName();
                    String path = null;//"C:\\Users\\Eldane\\Documents\\NetBeansProjects\\BC_Stationary_Management_System\";
                    Email email = new Email("eldanefer1@gmail.com", message, "Purchase Order Form", path);
                    email.sendEmail();
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Something went wrong! Purchase order was not successfully sent.", "Purchase Order Unsuccessfully Send ", JOptionPane.WARNING_MESSAGE);
                    frmManageOrders manageOrders = new frmManageOrders();
                    manageOrders.setVisible(true);
                    this.setVisible(false);
                }
            } catch (IOException ex) {
                Logger.getLogger(frmManageOrders.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        }
        
        
        
    }//GEN-LAST:event_btnPurchaseMouseClicked

    private void btnEditRequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditRequestMouseClicked
        frmEditOrders editOrder = new frmEditOrders();
        editOrder.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnEditRequestMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmManageOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmManageOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmManageOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmManageOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmManageOrders().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRequest;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnEditRequest;
    private javax.swing.JButton btnOrder;
    private javax.swing.JButton btnPurchase;
    private javax.swing.JComboBox<String> cmbProduct;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddRequest;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblLoggedUser;
    private javax.swing.JLabel lblLoggedUser1;
    private javax.swing.JLabel lblOrderStatus;
    private javax.swing.JLabel lblPriority;
    private javax.swing.JLabel lblProductInfo;
    private javax.swing.JLabel lblProductModel;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblRequestDate;
    private javax.swing.JLabel lblRequestInfo;
    private javax.swing.JLabel lblRequestInfo1;
    private javax.swing.JLabel lblSearchUsers;
    private javax.swing.JList<String> lbxUsers;
    private javax.swing.JPanel pnlMainDashHeader;
    private javax.swing.JPanel pnlMenu;
    private javax.swing.JPanel pnlProjectInfo;
    private javax.swing.JPanel pnlProjectInfo2;
    private javax.swing.JPanel pnlProjectInfo3;
    private javax.swing.JPanel pnlRegisterHeader1;
    private javax.swing.JTextField txtCategory;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtPriority;
    private javax.swing.JTextField txtProductModel;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtQuantityInStock;
    private javax.swing.JTextField txtRequestDate;
    private javax.swing.JTextField txtStaffMember;
    // End of variables declaration//GEN-END:variables
}
